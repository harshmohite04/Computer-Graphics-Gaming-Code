#include <stdio.h>
#include <stdlib.h>
#include <graphics.h>

// Define the screen size
const int X_MAX = 640;
const int Y_MAX = 480;
const int X_MIN = 0;
const int Y_MIN = 0;

// Function to compute the dot product of two points
float dotProduct(int x1, int y1, int x2, int y2) {
    return x1 * x2 + y1 * y2;
}

// Function to perform Sutherland-Hodgman polygon clipping
void sutherlandHodgmanClip(int polyPoints[][2], int numPoints, int clipperPoints[][2], int numClipperPoints) {
    int resultPoints[20][2];
    int numResultPoints = 0;

    for (int i = 0; i < numClipperPoints; i++) {
        int x1 = clipperPoints[i][0];
        int y1 = clipperPoints[i][1];
        int x2 = clipperPoints[(i + 1) % numClipperPoints][0];
        int y2 = clipperPoints[(i + 1) % numClipperPoints][1];

        numResultPoints = 0;
        for (int j = 0; j < numPoints; j++) {
            int x3 = polyPoints[j][0];
            int y3 = polyPoints[j][1];
            int x4 = polyPoints[(j + 1) % numPoints][0];
            int y4 = polyPoints[(j + 1) % numPoints][1];

            float dot1 = dotProduct(x2 - x1, y2 - y1, x3 - x1, y3 - y1);
            float dot2 = dotProduct(x2 - x1, y2 - y1, x4 - x1, y4 - y1);

            if (dot1 >= 0 && dot2 >= 0) {
                resultPoints[numResultPoints][0] = x4;
                resultPoints[numResultPoints][1] = y4;
                numResultPoints++;
            } else if (dot1 >= 0 && dot2 < 0) {
                float t = dotProduct(x2 - x1, y2 - y1, x1 - x3, y1 - y3) / dotProduct(x2 - x1, y2 - y1, x4 - x3, y4 - y3);
                resultPoints[numResultPoints][0] = x1 + t * (x4 - x3);
                resultPoints[numResultPoints][1] = y1 + t * (y4 - y3);
                numResultPoints++;
            } else if (dot1 < 0 && dot2 >= 0) {
                float t = dotProduct(x2 - x1, y2 - y1, x1 - x3, y1 - y3) / dotProduct(x2 - x1, y2 - y1, x4 - x3, y4 - y3);
                resultPoints[numResultPoints][0] = x1 + t * (x4 - x3);
                resultPoints[numResultPoints][1] = y1 + t * (y4 - y3);
                numResultPoints++;
                resultPoints[numResultPoints][0] = x4;
                resultPoints[numResultPoints][1] = y4;
                numResultPoints++;
            }
        }

        numPoints = numResultPoints;
        for (int k = 0; k < numResultPoints; k++) {
            polyPoints[k][0] = resultPoints[k][0];
            polyPoints[k][1] = resultPoints[k][1];
        }
    }

    // Drawing the resulting clipped polygon
    for (int i = 0; i < numResultPoints; i++) {
        int x1 = resultPoints[i][0];
        int y1 = resultPoints[i][1];
        int x2 = resultPoints[(i + 1) % numResultPoints][0];
        int y2 = resultPoints[(i + 1) % numResultPoints][1];
        line(x1, y1, x2, y2);
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, NULL);

    // Define the polygon
    int polyPoints[][2] = {{100, 100}, {200, 50}, {300, 100}, {300, 200}, {200, 250}, {100, 200}};
    int numPolyPoints = sizeof(polyPoints) / sizeof(polyPoints[0]);

    // Define the clipping window (a rectangle)
    int clipperPoints[][2] = {{150, 150}, {250, 150}, {250, 250}, {150, 250}};
    int numClipperPoints = sizeof(clipperPoints) / sizeof(clipperPoints[0]);

    // Drawing the clipping window
    for (int i = 0; i < numClipperPoints; i++) {
        int x1 = clipperPoints[i][0];
        int y1 = clipperPoints[i][1];
        int x2 = clipperPoints[(i + 1) % numClipperPoints][0];
        int y2 = clipperPoints[(i + 1) % numClipperPoints][1];
        line(x1, y1, x2, y2);
    }

    // Drawing the original polygon
    for (int i = 0; i < numPolyPoints; i++) {
        int x1 = polyPoints[i][0];
        int y1 = polyPoints[i][1];
        int x2 = polyPoints[(i + 1) % numPolyPoints][0];
        int y2 = polyPoints[(i + 1) % numPolyPoints][1];
        line(x1, y1, x2, y2);
    }

    // Perform Sutherland-Hodgman polygon clipping
    sutherlandHodgmanClip(polyPoints, numPolyPoints, clipperPoints, numClipperPoints);

    delay(5000);
    closegraph();
    return 0;
}
